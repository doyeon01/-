def skipRemainingStages = true

pipeline {
    agent any

    triggers {
        // GitLab Webhook을 통해 backend 브랜치로의 push 이벤트 시 트리거.
        gitlab(
            triggerOnPush: true,
        )
    }

    environment {
        SERVER_PORT = '8082'
        SERVER_NAME = 'accompanyboard'
        DOCKER_USERINFO = credentials('DOCKER_USER')
        DOCKER_REPO = credentials('DOCKER_REPO')
        EC2_IP = credentials('EC2_SERVER2_IP')
        SSH_INFO = credentials('EC2_SERVER2_SSH')
    }

    stages {

        stage('Checkout Code') {
            steps {
                // backend 브랜치의 accompanyboard 폴더만 체크아웃
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/be/accompanyboard-deploy']],
                    userRemoteConfigs: [[
                        url: 'https://lab.ssafy.com/s11-bigdata-dist-sub1/S11P21C205.git',
                        credentialsId: 'PERSONAL_ACCESS_TOKEN'
                    ]],
                    extensions: [[$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: "accompanyboard/"]]]]
                ])
            }
        }

        stage('Build Docker Image') {
            when {
                changeset "backend/accompanyboard/**"
            }
            steps {
                script {
                    skipRemainingStages = false
                    sh """
                    cd backend/accompanyboard
                    chmod +x ./gradlew
                    ./gradlew build
                    ls build/libs
                    docker build -t accompanyboard:latest .
                    """
                }
            }
        }

        stage('Login to Docker Registry') {
            when {
                changeset "backend/accompanyboard/**"
            }
            steps {
                script {
                    sh """
                    docker login -u $DOCKER_USERINFO_USR -p $DOCKER_USERINFO_PSW
                    """
                }
            }
        }

        stage('Push Docker Image to Repository') {
            when {
                changeset "backend/accompanyboard/**"
            }
            steps {
                script {
                    sh """
                    docker tag accompanyboard:latest $DOCKER_REPO_USR/$DOCKER_REPO_PSW:accompanyboard-latest
                    docker push $DOCKER_REPO_USR/$DOCKER_REPO_PSW:accompanyboard-latest
                    """
                }
            }
        }

        stage('Deploy to EC2') {
            when {
                changeset "backend/accompanyboard/**"
            }
            steps {
                script {
                    sh """
                    ssh -o StrictHostKeyChecking=no -i $SSH_INFO $SSH_INFO_USR@$EC2_IP <<-EOF
                    docker stop accompanyboard || true
                    docker rm accompanyboard || true
                    docker rmi $DOCKER_REPO_USR/$DOCKER_REPO_PSW:accompanyboard-latest || true
                    docker system prune -f --volumes
                    docker pull $DOCKER_REPO_USR/$DOCKER_REPO_PSW:accompanyboard-latest
                    docker run -it -d --name accompanyboard -p $SERVER_PORT:$SERVER_PORT $DOCKER_REPO_USR/$DOCKER_REPO_PSW:accompanyboard-latest
                    EOF
                    """.stripIndent()
                }
            }
        }

        stage('Logout from Docker Registry') {
            when {
                changeset "backend/accompanyboard/**"
            }
            steps {
                script {
                    sh """
                    docker logout
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished!'
        }
        success {
            script{
                if (skipRemainingStages) {
                    echo "No changes in accompanyboard folder, skipping build and deploy."
                } else {
                    echo "Deployed successfully on port ${SERVER_PORT}!"
                    def user = sh(script: 'git log -1 --pretty=format:"%an"', returnStdout: true).trim()
                    mattermostSend (
                        color: 'good',
                        message: "${user}님의 ${env.JOB_NAME} 서버 배포 성공. (#${env.BUILD_NUMBER}) ",
                    )
                }
            }
        }
        failure {
            echo 'Deployment failed!'
            script{
                def user = sh(script: 'git log -1 --pretty=format:"%an"', returnStdout: true).trim()
                mattermostSend (
                    color: 'danger',
                    message: "${user}님? ${env.JOB_NAME} 서버 터졌는데요? (#${env.BUILD_NUMBER}) ",
                )
            }
        }
    }
}
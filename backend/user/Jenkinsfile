def skipRemainingStages = false

pipeline {
    agent any

    triggers {
        // GitLab Webhook을 통해 deploy-test 브랜치로의 push 이벤트 시 트리거.
        gitlab(
            triggerOnPush: true,
        )
    }

    environment {
        USER_PORT = '8081'
        DOCKER_USERINFO = credentials('DOCKER_USER')
        DOCKER_REPO = credentials('DOCKER_REPO')
        EC2_IP = credentials('EC2_SERVER1_IP')
        SSH_INFO = credentials('EC2_SERVER1_SSH')
    }

    stages {

        stage('Checkout Code') {
            steps {
                // deploy-test 브랜치의 user 폴더만 체크아웃
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/deploy-test']],
                    userRemoteConfigs: [[
                        url: 'https://lab.ssafy.com/s11-bigdata-dist-sub1/S11P21C205.git',
                        credentialsId: 'PERSONAL_ACCESS_TOKEN'
                    ]],
                    extensions: [[$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: 'user/']]]]
                ])
            }
        }

//         stage('Check for user Changes') {
//             steps {
//                 script {
//                     // 원격 브랜치 상태를 가져와 최신 커밋 확인
//                     sh 'git fetch origin deploy-test'
//                     // 최근 커밋과 그 이전 커밋 비교, user 폴더에 변경된 파일이 있는지 확인
// //                     def changes = sh(script: "git diff --name-only HEAD~1 HEAD -- user/", returnStdout: true).trim()
//                     def changes = sh(script: "git diff --name-only origin/deploy-test~1 origin/deploy-test -- user/", returnStdout: true).trim()
//                     if (changes == '') {
// //                         echo 'No changes in user folder, skipping build and deploy.'
// //                         currentBuild.result = 'SUCCESS'
//                         skipRemainingStages = true
//                         return
//                     } else {
//                         echo "Changes detected in user folder. Proceeding with build and deploy."
//                     }
//                 }
//             }
//         }

        stage('Build Docker Image') {
            when {
                expression {
                    !skipRemainingStages
                }
            }
            steps {
                script {
                    sh """
                    cd backend/user
                    chmod +x ./gradlew
                    ./gradlew build
                    ls build/libs
                    docker build -t user:latest .
                    """
                }
            }
        }

        stage('Login to Docker Registry') {
            when {
                expression {
                    !skipRemainingStages
                }
            }
            steps {
                script {
                    sh """
                    docker login -u $DOCKER_USERINFO_USR -p $DOCKER_USERINFO_PSW
                    """
                }
            }
        }

        stage('Push Docker Image to Repository') {
            when {
                expression {
                    !skipRemainingStages
                }
            }
            steps {
                script {
                    sh """
                    docker tag user:latest $DOCKER_REPO_USR/$DOCKER_REPO_PSW:user-latest
                    docker push $DOCKER_REPO_USR/$DOCKER_REPO_PSW:user-latest
                    """
                }
            }
        }

        stage('Deploy to EC2') {
            when {
                expression {
                    !skipRemainingStages
                }
            }
            steps {
                script {
                    sh """
                    ssh -o StrictHostKeyChecking=no -i $SSH_INFO $SSH_INFO_USR@$EC2_IP <<-EOF
                    docker stop user || true
                    docker rm user || true
                    docker rmi $DOCKER_REPO_USR/$DOCKER_REPO_PSW:user-latest || true
                    docker system prune -f --volumes
                    docker pull $DOCKER_REPO_USR/$DOCKER_REPO_PSW:user-latest
                    docker run -it -d --name user -p $USER_PORT:$USER_PORT $DOCKER_REPO_USR/$DOCKER_REPO_PSW:user-latest
                    EOF
                    """.stripIndent()
                }
            }
        }

        stage('Logout from Docker Registry') {
            when {
                expression {
                    !skipRemainingStages
                }
            }
            steps {
                script {
                    sh """
                    docker logout
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished!'
        }
        success {
            script{
                if (skipRemainingStages) {
                    echo 'No changes in user folder, skipping build and deploy.'
                } else {
                    echo 'User deployed successfully on port 8081!'
                }
            }
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}
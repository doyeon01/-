pipeline {
    agent any

    environment {
        // 필요한 환경 변수 설정
        DOCKER_IMAGE = 'frontend'  // 사용할 Docker 이미지 이름
        REPO_URL = 'https://lab.ssafy.com/s11-bigdata-dist-sub1/S11P21C205.git'
        S3_BUCKET = 'your-s3-bucket'         // S3 버킷 설정 (S3 사용 시)
        FRONTEND_PORT = '3000'
        DOCKER_USERINFO = credentials('DOCKER_USER')
        DOCKER_REPO = credentials('DOCKER_REPO')
        EC2_IP = credentials('EC2_SERVER1_IP')
        SSH_INFO = credentials('EC2_SERVER1_SSH')
    }

    stages {
        stage('Checkout Code') {
            steps {
                // GitLab에서 소스 코드 체크아웃
                git branch: 'fe/deploy-test', url: "${REPO_URL}", credentialsId: 'PERSONAL_ACCESS_TOKEN'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Docker 빌드: Dockerfile을 기반으로 React 앱 빌드
                    sh '''
                    docker build -t ${DOCKER_IMAGE}:latest .
                    '''
                }
            }
        }

        stage('Login to Docker Registry') {
            steps {
                script {
                    sh """
                    docker login -u $DOCKER_USERINFO_USR -p $DOCKER_USERINFO_PSW
                    """
                }
            }
        }

        stage('Push Docker Image to Repository') {
            steps {
                script {
                    sh """
                    docker tag $DOCKER_IMAGE:latest $DOCKER_REPO_USR/$DOCKER_REPO_PSW:frontend-latest
                    docker push $DOCKER_REPO_USR/$DOCKER_REPO_PSW:frontend-latest
                    """
                }
            }
        }

        stage('Deploy to Docker') {
            steps {
                script {
                    sh """
                    ssh -o StrictHostKeyChecking=no -i $SSH_INFO $SSH_INFO_USR@$EC2_IP <<-EOF
                    docker stop $DOCKER_IMAGE || true
                    docker rm $DOCKER_IMAGE || true
                    docker rmi $DOCKER_REPO_USR/$DOCKER_REPO_PSW:$DOCKER_IMAGE-latest || true
                    docker system prune -f --volumes
                    docker pull $DOCKER_REPO_USR/$DOCKER_REPO_PSW:$DOCKER_IMAGE-latest
                    docker run -it -d --name $DOCKER_IMAGE -p $FRONTEND_PORT:80 $DOCKER_IMAGE:latest
                    EOF
                    """.stripIndent()
                }
            }
        }

        stage('Logout from Docker Registry') {
            steps {
                script {
                    sh """
                    docker logout
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished!'
        }
        success {
            echo 'FrontEnd deployed successfully!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}